# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cdk
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Setup nodejs
      uses: actions/setup-node@v2
      with:
        node-version: 16
    - name: Install aws-cdk
      run: npm install -g aws-cdk@1.110.1
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install awscli build
    - name: Lint with flake8/black/isort
      run: |
        export FILES=(*.py domino_cdk tests)
        # stop the build if there are Python syntax errors or undefined names
        flake8 ${FILES[@]} --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings.
        flake8 ${FILES[@]} --count --exit-zero --statistics
        black ${FILES[@]} --check
        isort ${FILES[@]} --check
    - name: Test with pytest
      run: |
        coverage run -m pytest tests

    - name: Coverage report
      run: |
        coverage report
    - name: Create/lint default config
      env:
        AWS_ACCOUNT_ID: ${{ secrets.INFRA_ACCOUNT_ID }}
        GITHUB_SHA: ${{ github.sha }}
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        GCR_JSON_CREDS: ${{ secrets.GCR_JSON_CREDS }}
      run: |
        export NAME=cdk-deploy-$(echo $GITHUB_SHA | cut -c1-6)
        ./util.py generate_config_template --name $NAME --dev --registry-username $REGISTRY_USERNAME --registry-password $REGISTRY_PASSWORD --gcr-json-creds $GCR_JSON_CREDS | sed -e "s/aws_region: __FILL__/aws_region: us-west-2/" -e "s/aws_account_id: __FILL__/aws_account_id: \"$AWS_ACCOUNT_ID\"/" > config.yaml
        ./util.py load_config -f ./config.yaml
    - name: Test default config (single and nested stacks)
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.INFRA_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.INFRA_ACCESS_KEY }}
      run: |
        cdk synth --context singlestack=true -q
        cdk synth -q
    - name: Upload distribution artifacts
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.DOMINO_ARTIFACTS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.DOMINO_ARTIFACTS_ACCESS_KEY }}
        DOMINO_CDK_VERSION: ${{ github.sha }}
        DATEDIR: "date +%Y%m%d"
      run: |
        cd ..
        make clean && make dist
        for suffix in "" "-terraform"; do
        filename="domino-cdk$suffix-$DOMINO_CDK_VERSION.tar.gz"
        aws s3 cp --acl=public-read ./dist/$filename s3://domino-artifacts/cdk/$($DATEDIR)/$filename
        echo "Artifact url: https://domino-artifacts.s3.amazonaws.com/cdk/$($DATEDIR)/$filename"
        done
    - name: Deploy CDK
      if: github.event.pull_request.draft == false
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.INFRA_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.INFRA_ACCESS_KEY }}
        GITHUB_SHA: ${{ github.sha }}
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        GCR_JSON_CREDS: ${{ secrets.GCR_JSON_CREDS }}
      run: |
        docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD quay.io
        export NAME=cdk-deploy-$(echo $GITHUB_SHA | cut -c1-6)
        export KUBECONFIG=$(pwd)/kubeconfig
        cdk deploy --require-approval never --outputs-file outputs.json
        $(jq -r ".[\"$NAME\"].ekskubeconfigcmd" outputs.json) --kubeconfig $KUBECONFIG
        echo ls'ing and cat'ting $KUBECONFIG
        ls -alh $KUBECONFIG
        cat $KUBECONFIG
        jq -r ".[\"$NAME\"].agentconfig" outputs.json > agent_template.yaml
        touch domino.yml && chmod 666 domino.yml kubeconfig
        docker run --rm -v $(pwd):/cdk quay.io/domino/deployer:v42 python -m fleetcommand_agent init --full -t /cdk/agent_template.yaml -f /cdk/domino.yml
        docker run --rm -v $(pwd):/cdk -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e KUBECONFIG=/cdk/kubeconfig quay.io/domino/deployer:v42 python -m fleetcommand_agent run -f /cdk/domino.yml
    - name: Destroy CDK
      if: always() && github.event.pull_request.draft == false
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.INFRA_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.INFRA_ACCESS_KEY }}
      run: |
        while [ $(($(date +%s) - $(date +%s -r "outputs.json"))) -lt 120 ]; do echo waiting to destroy && sleep 5; done
        cdk destroy --force
